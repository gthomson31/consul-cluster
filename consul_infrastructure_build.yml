AWSTemplateFormatVersion: "2010-09-09"
Description: >
    Greg Thomson - AcmeOps - Consul Cluster
    This Cloudformation template routes in traffic via a public facing load balancer to a target group of web servers split accross two avalibility zones 
    that are serving static website traffic imported from S3 as part of the launch Configuration.

    Network configuration is split into 1 private subnet and 1 public subnet per AZ. 
    Using the Network EU-WEST-1 which containts 3 AZ's

    External Internet access is provided via route to a seperate NAT for each private subnet and directly to the IGW for resources within the public subnet.

Parameters:
    EnvironmentName:
        Description: An Environment name that will be prefixed to resources
        Type: String
        Default: "AcmeOps"

    EnvironmentType:
        Description: Classify the infrastructure as either development or production
        Type: String
        Default: "Development"

    VpcCIDR:
        AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
        Description: An Environment name that will be prefixed to resources
        Type: String
        Default: "10.0.0.0/16"       

    PublicSubnet1CIDR:
        AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.1.0/24

    PublicSubnet3CIDR:
        AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.3.0/24

    PrivateSubnet1CIDR:
        AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
        Description: An Environment name that will be prefixed to resources
        Type: String 
        Default: "10.0.4.0/24"

    PrivateSubnet2CIDR:
        AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
        Description: An Environment name that will be prefixed to resources
        Type: String
        Default: "10.0.5.0/24"
  
    PrivateSubnet3CIDR:
        AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
        Description: An Environment name that will be prefixed to resources
        Type: String
        Default: "10.0.6.0/24"

Resources:

  ConsulRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-Autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - autoscaling:*
            Resource: "*"
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-Ec2
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            Resource: "*"
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-ElasticLoadBalancing
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:*
            Resource: "*"
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-Logs
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: "*"
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-s3
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource: "*"

  ConsulProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: ConsulRole

#NETWORKING RESOURCES 
  #VPC Initalistation
  AcmeOpsvpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc
        - Key: EnvironmentType
          Value: !Ref EnvironmentType

#Internet Gateway - Allows Access to from the web and Outbound access for instances

  AcmeOpsInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: AcmeOpsvpc
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
        - Key: EnvironmentType
          Value: !Ref EnvironmentType
          
  AcmeOpsInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        InternetGatewayId: !Ref AcmeOpsInternetGateway
        VpcId: !Ref AcmeOpsvpc

#Subnets ( 3 Public to each to host a bastion / 3 Private for Consul Servers  )

  AcmeOpsPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}_PublicSubnet1_(AZ1)
        - Key: EnvironmentType
          Value: !Ref EnvironmentType
      VpcId: !Ref AcmeOpsvpc

  AcmeOpsPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}_PublicSubnet2_(AZ2)
        - Key: EnvironmentType
          Value: !Ref EnvironmentType
      VpcId: !Ref AcmeOpsvpc


  AcmeOpsPublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}_PublicSubnet3_(AZ3)
        - Key: EnvironmentType
          Value: !Ref EnvironmentType
      VpcId: !Ref AcmeOpsvpc

  AcmeOpsPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}_PrivateSubnet1_(AZ1)
        - Key: EnvironmentType
          Value: !Ref EnvironmentType
      VpcId: !Ref AcmeOpsvpc

  AcmeOpsPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}_PrivateSubnet2_(AZ2)
        - Key: EnvironmentType
          Value: !Ref EnvironmentType
      VpcId: !Ref AcmeOpsvpc

  AcmeOpsPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}_PrivateSubnet3_(AZ3)
        - Key: EnvironmentType
          Value: !Ref EnvironmentType
      VpcId: !Ref AcmeOpsvpc


#NAT Gateway setup for Outbound web traffic
  # Create the Static IP to be used for the NAT Gateways

  AcmeOpsNatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: AcmeOpsInternetGatewayAttachment
      Properties: 
          Domain: vpc

  AcmeOpsNatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: AcmeOpsInternetGatewayAttachment
      Properties: 
          Domain: vpc

  AcmeOpsNatGateway3EIP:
      Type: AWS::EC2::EIP
      DependsOn: AcmeOpsInternetGatewayAttachment
      Properties: 
          Domain: vpc

  # Create and attach the ELastic IPs to the NAT GW
  AcmeOpsNatGateway1: 
      Type: AWS::EC2::NatGateway
      Properties:
            AllocationId: !GetAtt AcmeOpsNatGateway1EIP.AllocationId
            SubnetId: !Ref AcmeOpsPublicSubnet1
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-natgw-az1

  AcmeOpsNatGateway2: 
      Type: AWS::EC2::NatGateway
      Properties:
            AllocationId: !GetAtt AcmeOpsNatGateway2EIP.AllocationId
            SubnetId: !Ref AcmeOpsPublicSubnet2
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-natgw-az2

  AcmeOpsNatGateway3: 
      Type: AWS::EC2::NatGateway
      Properties:
            AllocationId: !GetAtt AcmeOpsNatGateway3EIP.AllocationId
            SubnetId: !Ref AcmeOpsPublicSubnet3
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-natgw-az3

# Route Tables 
  #Public Routing Table 

  AcmeOpsPublicSubnetRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
            Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName}_public_routetable
              - Key: EnvironmentType
                Value: !Ref EnvironmentType             
            VpcId: !Ref AcmeOpsvpc
  
  PublicSubnetRouteIGW:
    Type: AWS::EC2::Route
    DependsOn:
      - AcmeOpsInternetGatewayAttachment
    Properties:
        RouteTableId: !Ref AcmeOpsPublicSubnetRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref AcmeOpsInternetGateway

  #Â Associate the public subnets with the route table 

  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref AcmeOpsPublicSubnetRouteTable
          SubnetId: !Ref AcmeOpsPublicSubnet1

  PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref AcmeOpsPublicSubnetRouteTable
          SubnetId: !Ref AcmeOpsPublicSubnet2

  PublicSubnet3RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref AcmeOpsPublicSubnetRouteTable
          SubnetId: !Ref AcmeOpsPublicSubnet3

  #Private Subnet Routing Tables 
  #Private Subnet 1

  AcmeOpsPrivateSubnet1RouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
            Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName}_private_routetable1
              - Key: EnvironmentType
                Value: !Ref EnvironmentType   
            VpcId: !Ref AcmeOpsvpc

  AcmeOpsPrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref AcmeOpsPrivateSubnet1RouteTable
          SubnetId: !Ref AcmeOpsPrivateSubnet1

  AcmeOpsNatRoutePrivateSubnet1:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref AcmeOpsPrivateSubnet1RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref AcmeOpsNatGateway1    
 
 
  # Private Subnet 2 Routing

  AcmeOpsPrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
          Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName}_private_routetable2
              - Key: EnvironmentType
                Value: !Ref EnvironmentType                  
          VpcId: !Ref AcmeOpsvpc 

  AcmeOpsPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref AcmeOpsPrivateSubnet2RouteTable
        SubnetId: !Ref AcmeOpsPrivateSubnet2

  RouteTableSubnetprivate2:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref AcmeOpsPrivateSubnet2RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref AcmeOpsNatGateway2      

 
  # Private Subnet 3 Routing

  AcmeOpsPrivateSubnet3RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
          Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName}_private_routetable3
              - Key: EnvironmentType
                Value: !Ref EnvironmentType                  
          VpcId: !Ref AcmeOpsvpc 

  AcmeOpsPrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref AcmeOpsPrivateSubnet3RouteTable
        SubnetId: !Ref AcmeOpsPrivateSubnet3

  RouteTableSubnetprivate3:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref AcmeOpsPrivateSubnet3RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref AcmeOpsNatGateway3     


#  Security Groups 

  AcmeOpsBastionSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH into the Bastion VMS
      VpcId: !Ref AcmeOpsvpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0     

  ConsulSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enables SSH access.
      VpcId: !Ref AcmeOpsvpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref AcmeOpsBastionSecGroup
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VpcCIDR
   
  ConsulLBSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allows Access to UI Via LB.
      VpcId: !Ref AcmeOpsvpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AcmeOpsBastionSecGroup
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VpcCIDR

# Launch Template

  BastionLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        UserData:
          Fn::Base64: 
            !Sub |
            #!/bin/bash
            sudo yum update -y
            apt-get update -y
            apt-get install unzip awscli -y

        ImageId: ami-0db188056a6ff81ae
        SecurityGroupIds:
          -  !GetAtt AcmeOpsBastionSecGroup.GroupId
        InstanceType: t3.micro
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10
        KeyName: acme_ops_ssh_key
  
  ConsulServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        UserData:
          Fn::Base64: 
            !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
            sudo yum -y install consul
            consul -v

            #Copy Consul file into the instance
            sudo aws s3 cp s3://acmeoperations-consul/ConsulConfig/consul-server-config.hcl /etc/consul.d/consul.hcl
            sudo aws s3 cp s3://acmeoperations-consul/ConsulConfig/consul.service /etc/systemd/system/consul.service

            # Grab instance IP
            local_ip=`ip -o route get to 169.254.169.254 | sed -n 's/.*src \([0-9.]\+\).*/\1/p'`

            # # Ammend the Consul config with the IP address 
            # sudo chmod 777 /etc/consul.d/consul.hcl
            # sudo echo advertise_addr = "$local_ip" >> /etc/consul.d/consul.hcl

            # Start Consul
            sudo systemctl start consul 
        
        ImageId: ami-0db188056a6ff81ae
        SecurityGroupIds:
          -  !GetAtt ConsulSecGroup.GroupId
        InstanceType: t3.micro
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10
        KeyName: consul-cluster-ssh
        IamInstanceProfile:
          Ref: ConsulProfile


#Autoscaling Group - Creates the Bastion Servers and the Consul Servers. 

  BastionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Join [ ",", [ !Ref AcmeOpsPublicSubnet1, !Ref AcmeOpsPublicSubnet2, !Ref AcmeOpsPublicSubnet3 ]]
      LaunchTemplate:
        LaunchTemplateId: !Ref BastionLaunchTemplate
        Version: "1"
      MinSize: '3'
      MaxSize: '5'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Bastion
          PropagateAtLaunch: true
        - Key: Project
          Value: !Sub ${EnvironmentName}-Consul
          PropagateAtLaunch: true

  ConsulAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Join [ ",", [ !Ref AcmeOpsPrivateSubnet1, !Ref AcmeOpsPrivateSubnet2, !Ref AcmeOpsPrivateSubnet3 ]]
      LaunchTemplate:
        LaunchTemplateId: !Ref ConsulServerLaunchTemplate
        Version: "1"
      MinSize: '3'
      MaxSize: '5'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ConsulServer
          PropagateAtLaunch: true
        - Key: Project
          Value: !Sub ${EnvironmentName}-Consul
          PropagateAtLaunch: true

# # Consul Load Balancer

#   ConsulAppLB:
#       Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#       Properties:
#         Name: !Sub ${EnvironmentName}-LoadBalancer
#         Subnets:
#           - !Ref AcmeOpsPublicSubnet1
#           - !Ref AcmeOpsPublicSubnet2
#           - !Ref AcmeOpsPublicSubnet3
#         SecurityGroups: 
#           - !GetAtt ConsulLBSecGroup.GroupId
#         Tags:
#           - Key: Name
#             Value: !Sub ${EnvironmentName}-LoadBalancer
#           - Key: Project
#             Value: !Sub ${EnvironmentName}-Consul

#   ConsulALBListener:
#     Type: AWS::ElasticLoadBalancingV2::Listener
#     Properties:
#       DefaultActions:
#       - Type: forward
#         TargetGroupArn: !Ref ConsulServerTargetGroup
#       LoadBalancerArn: !Ref ConsulAppLB
#       Port: 80
#       Protocol: HTTP

#   ConsulALBListenerRule:
#       Type: AWS::ElasticLoadBalancingV2::ListenerRule
#       Properties:
#         Actions:
#         - Type: forward
#           TargetGroupArn: !Ref 'ConsulServerTargetGroup'
#         Conditions:
#         - Field: path-pattern
#           Values: [/]
#         ListenerArn: !Ref 'ConsulALBListener'
#         Priority: 1

# # Target Group 

#   ConsulServerTargetGroup:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       HealthCheckIntervalSeconds: 90
#       HealthCheckPath: /
#       HealthCheckProtocol: HTTP
#       HealthCheckTimeoutSeconds: 8
#       HealthyThresholdCount: 2
#       Port: 80
#       Protocol: HTTP
#       UnhealthyThresholdCount: 2
#       VpcId: !Ref AcmeOpsvpc

#       Tags:
#         - Key: Name
#           Value: !Sub ${EnvironmentName}-TargetGroup
#         - Key: EnvironmentType
#           Value: !Ref EnvironmentType
#       TargetGroupAttributes:
#       - Key: slow_start.duration_seconds
#         Value: "90"
      
# Output Variables for created Infrastructure 

Outputs:
    VPC: 
      Description: A reference to the created VPC
      Value: !Ref AcmeOpsvpc
      Export:
        Name: !Sub ${EnvironmentName}-VPCID
   
    NatGatway1:
      Description: The created NatGateway for Private Subnet 1
      Value: !Ref AcmeOpsNatGateway1
      Export:
        Name: !Sub ${EnvironmentName}-NatGateway1

    NatGatway2:
      Description: The created NatGateway for Private Subnet 2
      Value: !Ref AcmeOpsNatGateway2
      Export:
        Name: !Sub ${EnvironmentName}-NatGateway2

    NatGatway3:
      Description: The created NatGateway for Private Subnet 3
      Value: !Ref AcmeOpsNatGateway3
      Export:
        Name: !Sub ${EnvironmentName}-NatGateway3

    LoadBalancerDNSName:
      Description: DNS Name on the application Load Balancer
      Value: !Join ["",["http://", !GetAtt ConsulAppLB.DNSName]]
      Export:
        Name: !Sub ${EnvironmentName}-ALB-DNS